#!/bin/bash

set -ue

main() {
    parse_args "$@"

    if ! git rev-parse 1>/dev/null 2>&1; then
        fail "This isn't a git directory."
    fi

    extract_remote_url_and_domain

    url="${remote_url}"

    if [[ -z "${git_branch:-}" ]]; then
        git_branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
        if [[ "$git_branch" == 'HEAD' ]]; then
            git_branch=''
        fi
    fi
    debug git_branch="$git_branch"

    git_commit="$(git rev-parse HEAD 2> /dev/null)"
    debug git_commit="$git_commit"

    case "$action" in
        help|h)        print_help ;;
        home|'')       _open "$url" ;;
        branches|b)    _open "$url/branches" ;;
        issues|i)      _open "$url/issues" ;;
        releases|r)    _open "$url/releases" ;;
        tags|t)        _open "$url/tags" ;;

        commits|c)
            if [[ "$remote_api" = 'ado' ]]; then
                _open "$url?version=$(get_ado_version)&_a=history"
            else
                _open "$url/commits/${git_branch}"
            fi
        ;;

        current|tree|'-')
            if [[ "$remote_api" = 'ado' ]]; then
                _open "$url?version=$(get_ado_version)"
            else
                _open "$url/tree/${git_branch:-$git_commit}"
            fi
        ;;

        create-pr|pr)
            if [[ "$remote_api" = 'ado' ]]; then
                require_git_branch
                _open "$url/pullrequestcreate?sourceRef=${git_branch:-$git_commit}"
            else
                fail_unsupported
            fi
        ;;

        wiki|w)
            if [[ "$remote_api" == 'gitlab' ]]; then
                _open "$url/wikis"
            else
                _open "$url/wiki"
            fi
        ;;

        settings|s)
            if [[ "$remote_api" == 'gitlab' ]]; then
                _open "$url/edit"
            else
                _open "$url/settings"
            fi
        ;;

        repo-settings|rs)
            _open "$url/settings/repository"
        ;;

        *)
            print_help
            fail "Unknown action $action"
        ;;
    esac
}

parse_args() {
    action=''
    remote_name='origin'
    debug='false'

    while [ $# != 0 ]; do
        case $1 in
            --branch|-b)
                if [[ $# -lt 2 ]]; then
                    fail "No git branch name."
                fi
                git_branch="$2"
                shift
            ;;
            --remote|-r)
                if [[ $# -lt 2 ]]; then
                    fail "No remote name."
                fi
                remote_name="$2"
                shift
            ;;

            --debug) debug='true' ;;

            *)
                if [[ -n "$action" ]]; then
                    fail "Only one action is required."
                fi
                action="$1"
            ;;
        esac
        shift
    done

    if [[ "$debug" == 'true' ]]; then
        debug() {
            echo "DEBUG: $@"
        }

        # set -x
    else
        debug() { return; }
    fi
}

fail() {
    echo >&2 "FAILED: $@"
    exit 1
}

info() {
    echo "INFO: $@"
}

print_help () {
    echo -n '''
Usage: git (browse|go) ([|home] | [-|current] | [b|branches] | [c|commits] | [h|help] | [i|issues] | [r|releases] | [s|settings] | [t|tags] | [w|wiki] | [repo-settings])
''' | tail +2
}


extract_remote_url_and_domain() {
    original_remote_url="$(git config --get "remote.${remote_name}.url")"
    debug original_remote_url="$original_remote_url"

    remote_url=${original_remote_url%.git}

    git_protocol="$(echo "$remote_url" | awk -v FS="(@|:)" '{print $1}')"
    debug git_protocol="$git_protocol"

    if [[ "$git_protocol" == 'http' ]] || [[ "$git_protocol" == 'https' ]]; then
        remote_domain="$(echo "$remote_url" | awk -F'/' '{print $3}')"
        remote_url="$remote_url"
    elif [[ $git_protocol == 'git' ]]; then
        remote_url="${remote_url#*@}"
        remote_domain="$(echo "$remote_url" | awk -F':' '{print $1}')"
        remote_url="https://${remote_url/:/\/}"
    elif [[ "$git_protocol" == 'github' ]] || [[ "$git_protocol" == 'gitlab' ]]; then
        remote_domain="${git_protocol}.com"
        remote_url="https://${git_protocol}.com/${remote_url#*:}"
    else
        fail "Remote $remote_name is invalid. Remote URL: $remote_url"
    fi

    debug remote_url="$remote_url"
    debug remote_domain="$remote_domain"

    if [[ "$remote_domain" = 'github.com' ]]; then
        remote_api='github'
    elif [[ "$remote_domain" = 'gitlab.com' ]]; then
        remote_api='gitlab'
    elif [[ "$remote_domain" =~ ".visualstudio.com" ]]; then
        remote_api='ado'
    else
        fail "Cannot infer API name from remote URL: $remote_url."
    fi

    debug remote_api="$remote_api"
}

require_git_branch() {
    if [[ -z "$git_branch" ]]; then
        fail "A git branch must be checked out."
    fi
}

fail_unsupported() {
    fail "Action is not supported for ${remote_api:-undefined} API."
}

get_ado_version() {
    if [[ -n "$git_branch" ]]; then
        echo "GB$git_branch"
    else
        echo "GC$git_commit"
    fi
}


get_default_branch() {
    default_branch="$(git config --get user.default-branch)"
    if [[ -z "$default_branch" ]]; then
        default_branch='master'
    fi
    echo "$default_branch"
}

_open() {
    local url="$1"

    info "Opening URL: $url"
    open-url "$url"
}

main "$@"
