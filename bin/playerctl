#!/bin/bash

source ~/.dotfiles.env

PLAYERCTL="$(which -a playerctl | grep -v "$(realpath "$0")" | head -1)"
[[ -z "$PLAYERCTL" ]] && { echo "playerctl wrapper: Cannot find playerctl" >&2; exit 1; }
[[ "$PLAYERCTL" -ef "$(realpath "$0")" ]] && { echo "playerctl wrapper: Wrapper would call itself recursively. Exit" >&2; exit 2; }
[[ "$CUSTOM_PLAYERCTL_IN_CALL_STACK" = 'true' ]] && { echo "playerctl wrapper: Wrapper called itself. Exit" >&2; exit 2; }
export CUSTOM_PLAYERCTL_IN_CALL_STACK='true'

cmus_remote_w () {
    local server="$1"
    shift

    local address="${server%%/*}"
    local password="${server##*/}"
    local args=()
    [[ -n "$address" ]] && args+=(--server "$address")
    [[ -n "$password" ]] && args+=(--passwd "$password")
    timeout 1 cmus-remote "${args[@]}" "$@"
}

cmus_is_running() {
    local server="$1"
    if cmus_remote_w "$server" -Q > /dev/null 2>&1; then
        return 0
    fi
    return 1
}

cmus_status() {
    local server="$1"
    if ! cmus_is_running "$server"; then
        echo "Not available"
        return 1
    fi
    local status="$(cmus_remote_w "$server" -Q | grep '^status' | cut -d ' ' -f 2)"
    status="$(tr '[:lower:]' '[:upper:]' <<< ${status:0:1})${status:1}"
    echo "$status"
}

cmus_perform_action() {
    local server="$1"
    local action="$2"

    case "$action" in
        play)      cmus_remote_w "$server" -p ;;
        pause)     cmus_remote_w "$server" -u ;;
        stop)      cmus_remote_w "$server" -s ;;
        next)      cmus_remote_w "$server" -n ;;
        previous)  cmus_remote_w "$server" -r ;;
        status)
            cmus_status "$server" || exit 1
        ;;
        play-pause)
            if [[ "$(cmus_status "$server")" != 'Playing' ]]; then
                cmus_remote_w "$server" -p
            else
                cmus_remote_w "$server" -u
            fi
        ;;
    esac
}

cmus_metadata() {
    local server="$1"
    local tag="$2"

    local result=''
    if [[ -z "$tag" ]]; then
        result="$(cmus_metadata "$server" title) - $(cmus_metadata "$server" artist)"
    elif [[ "$tag" = "file" ]]; then
        result="$(cmus_remote_w "$server" -Q | grep "^file " | sed "s/^file //")"
    else
        result="$(cmus_remote_w "$server" -Q | grep "^tag $tag" | sed "s/^tag $tag //")"
    fi

    echo -n "$result"
}

playerctl_with_player() {
    local player="$1"
    shift
    if [[ -z "$player" ]]; then
        "$PLAYERCTL" "$@"
    else
        "$PLAYERCTL" -p "$player" "$@"
    fi
}

list_players() {
    if cmus_is_running ''; then
        echo 'cmus'
    fi
    if [[ "$PLAYERCTL_INCLUDE_REMOTE" == 'true' ]]; then
        local cmus_server
        while IFS= read cmus_server; do
            if [[ -n "$cmus_server" ]] && cmus_is_running "$cmus_server"; then
                echo "cmus-server-$cmus_server"
            fi
        done < <(echo "$DOTFILES_CONFIG_CMUS_SERVER_CREDENTIALS" | tr ';' '\n')
    fi
    playerctl_with_player '' -l 2>/dev/null
}

get_art_file() {
    local player="$1"
    if [[ "$player" == 'spotify' ]]; then
        "$DOTFILES_HOME/bin/extract-album-art-spotify" "$(playerctl_with_player "$player" metadata mpris:artUrl)"
    else
        "$DOTFILES_HOME/bin/extract-album-art" "$(show_metadata "$player" file)"
    fi
}

cmus_credentials () {
    local player="$1"
    if [[ "$player" = 'cmus' ]]; then
        echo ''
    elif [[ "$player" = 'cmus-server'-* ]]; then
        echo "${player##cmus-server-}"
    fi
}

show_metadata() {
    local player="$1"
    local tag="$2"

    if [[ "$tag" = 'artFile' ]]; then
        echo -n "$(get_art_file "$player")"
    else
        if [[ "$player" = cmus* ]]; then
            cmus_metadata "$(cmus_credentials "$player")" "$tag"
        else # end of unsupported players
            if [[ "$tag" = 'file' ]]; then
                local url="$(playerctl_with_player "$player" metadata xesam:url)"
                local file="$(urlencode -d "${url#file://}")"
                echo -n "$file"
            else # end of unsupported options
                if [[ -z "$tag" ]]; then
                    playerctl_with_player "$player" metadata
                else
                    playerctl_with_player "$player" metadata "$tag"
                fi
            fi
        fi
    fi
}

display_notification() {
    local player="$1"

    local app="$player"
    local title="$(show_metadata "$player" title)"
    title="${title:-Unknown}"
    local artist="$(show_metadata "$player" artist)"
    artist="${artist:-Unknown}"

    local icon_file="$(show_metadata "$player" artFile)"

    local args=(
        -t 5000
        -a "$app"
        "$title"
        "by $artist"
    )

    [[ -s "$icon_file" ]] && args+=(-i "$icon_file")
    notify-send "${args[@]}"
}

perform_action() {
    local player="$1"
    local action="$2"

    if [[ "$player" == cmus* ]]; then
        cmus_perform_action "$(cmus_credentials "$player")" "$action"
    else
        playerctl_with_player "$player" "$action"
    fi
}

player="$(list_players | head -1)"

while [[ $# != 0 ]]; do
    case "$1" in
        -p|--player)
            player="$2"
            shift
        ;;
        -l|--list-all)
            list_players
        ;;
        play|pause|play-pause|stop|next|previous|status)
            perform_action "$player" "$1"
        ;;
        metadata)
            show_metadata "$player" "${@:2}"
            while [[ $# != 0 ]]; do shift; done
        ;;
        notification)
            display_notification "$player"
        ;;
        *)
            echo "Error: Unknown argument \"$1\""
            exit 1
        ;;
    esac
    shift
done
