#!/bin/bash

set -eu

pr_branch=''
target_branch=''
remote_name='origin'
from_checkpoint=''
save_checkpoint='false'
fetch='true'
local_branch='false'

while [ $# != 0 ]; do
    case "$1" in
        --pr-branch|--branch|--pr|-b) pr_branch="$2";       shift ;;
        --from-checkpoint|--from|-f)  from_checkpoint="$2"; shift ;;
        --target-branch|-t)           target_branch="$2";   shift ;;
        --remote-name|-r)             remote_name="$2";     shift ;;

        --save-checkpoint|--save|-s)  save_checkpoint='true' ;;
        --no-fetch)                   fetch='false' ;;
        --local)                      local_branch='true' ;;

        *)
            if [[ "$#" -eq 1 ]]; then
                pr_branch="$1"
            else
                echo "Invalid syntax. Unknown argument: '$1'."
                exit 1
            fi
        ;;
    esac
    shift
done

set -x

info() {
    echo "INFO: $@"
}

debug() {
    echo "DEBUG: $@"
}

if [[ -z "$target_branch" ]]; then
    target_branch="$(git config --get user.defaultReviewBranch)"
fi

if [[ -z "$target_branch" ]]; then
    target_branch="${GIT_TARGET_BRANCH:-master}"
fi

debug pr_branch="$pr_branch"
debug target_branch="$target_branch"
debug remote_name="$remote_name"
debug from_checkpoint="$from_checkpoint"
debug save_checkpoint="$save_checkpoint"
debug fetch="$fetch"
debug local_branch="$local_branch"

if [[ -z "$pr_branch" ]]; then
    echo "Specify branch to review" >&2
    return 1
fi

repo_dir="$(git root-dir)"
if [[ -z "$repo_dir" ]]; then
    repo_dir='.'
fi
debug repo_dir="$repo_dir"

checkpoint_file="$repo_dir/.git/review/checkpoints/${pr_branch//\//%}"
mkdir -p "$(dirname "$checkpoint_file")"
debug checkpoint_file="$checkpoint_file"

if [[ -z "$from_checkpoint" ]] && [[ -f "$checkpoint_file" ]]; then
    from_checkpoint="$(cat "$checkpoint_file" | tail -n 1)"
    debug from_checkpoint="$from_checkpoint"
fi

if [[ "$save_checkpoint" == 'true' ]]; then
    git status

    git commit -m "Reviewed (from checkpoint $from_checkpoint)"

    new_checkpoint="$(git rev-parse --verify HEAD)"
    echo "$new_checkpoint" >> "$checkpoint_file"
    info "Saved checkpoint '$new_checkpoint' to '$checkpoint_file'."

    exit 0
fi

if [[ "$fetch" == 'true' ]] && [[ "$local_branch" == 'false' ]]; then
    git fetch -v "$remote_name" "$target_branch" "$pr_branch"
fi

pr_branch_ref="$remote_name/$pr_branch"
if [[ "$local_branch" == 'true' ]]; then
    pr_branch_ref="$pr_branch"
fi

merge_base="$(git merge-base "$pr_branch_ref" "$remote_name/$target_branch")"
debug merge_base="$merge_base"

git stash-all
git clean -fd

git checkout -f -B "review/$pr_branch" "$merge_base"

# Restore last reviewed checkpoint.
if [[ -n "$from_checkpoint" ]] && [[ "$from_checkpoint" != 'null' ]]; then
    git restore --no-overlay --source "$from_checkpoint" -- "$repo_dir"
    git add "$repo_dir"
    git status
    git commit -am "Reviewed (from checkpoint $from_checkpoint)"
fi

# git restore --overlay --source "$pr_branch_ref" -- "$repo_dir"
git checkout -f --no-overlay "$pr_branch_ref" -- "$repo_dir"
git reset
git status
