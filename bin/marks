#!/bin/bash

set -e

source ~/.dotfiles.env
source "$DOTFILES_HOME/bin/lib/can_execute"
source "$DOTFILES_HOME/bin/lib/polyfills.sh"

config_file="$(custom-env-resolve 'config/marks.tsv')"

main () {
    if [[ "$#" = '0' ]]; then
        list_marks "$@"
        exit
    fi

    subcommand="$1"
    shift
    case "$subcommand" in
        add) add_mark "$@" ;;
        list) list_marks "$@" ;;
        remove) remove_mark "$@" ;;
        update) update_marks "$@" ;;
        edit) "${EDITOR:-vim}" "$config_file" ;;
        *) echo >&2 "Usage: $0 [add|list|remove|update|edit]"; exit 1 ;;
    esac
}

list_marks () {
    local long='true'
    [[ "$1" == '-s' ]] && { long='false'; }

    if [[ "$long" == 'true' ]]; then
        cat "$config_file" |
            sed '/^#/d; s/\t/\t => /' |
            ( can_execute column && column -c1 -t -s $'\t' || cat ) |
            less -FRX
    else
        cat "$config_file" | sed '/^#/d; s/\t.*//'
    fi
}

add_mark () {
    local interactive='true'
    [[ "$1" == '-f' ]] && { interactive='false'; shift; }
    if [[ "$#" -lt 1 ]]; then
        echo >&2 "Usage: $0 add MARK [PATH]"
        return 1
    fi
    local mark="$1"

    local path
    if [[ "$#" -lt 2 ]]; then
        path="$(realpath .)"
    else
        path="$(realpath -s "$2")"
    fi

    local line="$(cat "$config_file" | grep "^${mark}\s\+")"
    if [[ -n "$line" ]]; then
        echo >&2 "Mark ${mark} exists. Remove it first"
        remove_mark "${mark}" || return 1
    fi

    local response
    if [ "$interactive" = 'true' ]; then
        printf "Add %s => %s ? ([y]/n) " "$mark" "$path"
        read -r response
    else
        response='y'
    fi

    if [ "$response" == 'n' ]; then
        return 1
    fi

    echo "${mark}"$'\t'"${path}" | tee -a "$config_file" | sed 's/^/>> /'
    update_marks
    return 0
}

remove_mark () {
    local interactive='true'
    [[ "$1" == '-f' ]] && { interactive='false'; shift; }
    if [[ "$#" -lt 1 ]]; then
        echo >&2 "Usage: $0 remove MARK"
        return 1
    fi
    local mark="$1"
    local line="$(cat "$config_file" | grep "^${mark}\s\+")"
    if [[ -z "$line" ]]; then
        echo >&2 "Cannot find mark ${mark}"
        return 1
    fi

    local path="${line##*$'\t'}"

    local response
    if [ "$interactive" = 'true' ]; then
        printf "Remove %s => %s ? ([y]/n) " "$mark" "$path"
        read -r response
    else
        response='y'
    fi

    if [ "$response" == 'n' ]; then
        return 1
    fi

    sed "/^${mark}\s\+/d" -i "$config_file"
    update_marks
    return 0
}

update_marks () {
    "$DOTFILES_HOME/bin/update-marks" > /dev/null
}

main "$@"
