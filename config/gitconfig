[alias]
    # Short names
    a = add
    br = branch
    c = commit
    co = checkout
    df = diff
    pick = cherry-pick
    st = status

    cor = "!git checkout-remote"
    cs = "!git create-stash"
    go = "!f() { git-browse \"$@\"; }; f"
    next = "!f() { branch=\"${1:-master}\"; git checkout \"$(git log --reverse --ancestry-path --oneline HEAD..\"${branch}\" | head -1 | awk '{print $1}')\"; }; f"
    rbb = "!f() { count=\"$1\"; shift; git rebase -i \"$@\" \"HEAD~${count}\"; }; f"
    rbon = "!git rebase-on"
    rrb = "!git redo-rebase-on"

    # Simple
    current-branch = rev-parse --abbrev-ref HEAD
    f = fetch -v --all
    l = log --graph --pretty=longline
    ll = log --graph
    lp = log --graph --patch
    mt = mergetool --tool customVimMergeToolMin
    mtv = mergetool --tool customVimMergeTool
    prev = checkout HEAD~
    rb = rebase -i
    rbc = rebase --continue
    rl = log --walk-reflogs --pretty=reflog-short
    rll = log --walk-reflogs --pretty=reflog-long
    root-dir = rev-parse --show-cdup

    # External scripts
    create-github = "!git-create-github"
    create-gitlab = "!git-create-gitlab"
    review = "!git-review"
    review-checkpoint = "!git-review-checkpoint"

    # Functions
    author-date = "!f() { git filter-repo --force --commit-callback 'commit.committer_date = commit.author_date' --refs HEAD~\"${1:-1}\"..HEAD; }; f"
    author-date-old = "!f() { git filter-branch -f --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE' HEAD~\"${1:-1}\"..HEAD; }; f" # git versoin < 2.22.0
    backup = "!f() { local branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; local tag_name=\"BACKUP/${branch_name}-$(date +\"%Y-%m-%d_%H-%M-%S\")\"; git tag \"$tag_name\" \"${1:-HEAD}\" && echo \"Created tag: $tag_name\"; }; f"
    stash-all = "!f() { ! git is-index-empty && echo >&2 \"FAILED: Index is not empty\" && return 1; git stash -u; }; f"
    checkout-remote = "!f() { remote_name=\"$1\"; git stash-all && git is-clean && git fetch -v origin \"$1\" && git checkout -f -B \"$1\" \"origin/$1\"; }; f"
    cleanup = "!f() { git fsck && git prune && git reflog expire --expire=now --all && git repack -ad && git prune; }; f"
    create-stash = "!f() { git is-clean && echo \"Nothing to stash\" && return 0; ! git is-index-empty && echo >&2 \"FAILED: Index is not empty\"; return 1; git add -A && git stash push --keep-index && git reset; }; f"
    init-root = "!f() { git init && git commit --allow-empty -m \"Root Commit\"; }; f"
    is-clean = "!f() { test -z \"$(git status --short )\"; }; f"
    is-index-empty = "!f() { test -z \"$(git diff-index --cached --name-only HEAD)\"; }; f"
    rebase-on = "!f() { local remote_branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; git rebase -i --autosquash --onto \"$remote_branch_name\" \"$(git merge-base \"$remote_branch_name\" HEAD)\" \"$(git rev-parse --abbrev-ref HEAD)\"; }; f"
    recommit = "!f() { echo \"$(git l -1)\" && old_msg=\"$(git log -1 --format='%s')\" && git reset --soft HEAD~ && git commit -m \"$old_msg\"; }; f"
    redo-rebase-on = "!f() { local remote_branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; git rebase -i --autosquash \"$(git merge-base \"$remote_branch_name\" HEAD)\"; }; f"

    # TODO: Remove
    old-review = "!f() { set -x; branch=\"$1\" && test -n \"$branch\" || { echo \"Specify branch to review\" >&2; return 1; } && last_checkpoint=\"$2\" && git stash-all && git is-clean && git fetch -v origin \"$branch\" && merge_base=\"$(git merge-base \"origin/$branch\" \"origin/${GIT_TARGET_BRANCH:-master}\")\" && git checkout -B review \"$merge_base\" && { test -z \"$last_checkpoint\" || git checkout -f \"$last_checkpoint\" -- .; } && git restore --source \"origin/$branch\" -- .; }; f"
    old-review-checkpoint = "!f() { set -x; git commit -m \"reviewed: $(date --utc -Isec)\" && git rev-parse --verify HEAD; }; f"

[core]
    editor = vim
    pager = less
    excludesfile = ~/.gitignore
    autocrlf = input

[color]
    ui = true

[format]
    pretty = default

[pretty]
    default = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Commit: %C(bold red)%H%C(dim white)%d%C(reset)%n\
Author: %C(bold blue)%an <%ae>%C(reset)%n\
Date:   %ci %C(green)(%cr)%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    detailed = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Commit Hash:     %C(bold red)%H%C(dim white)%d%C(reset)%n\
Parent Hashes:   %C(bold red)%P%C(reset)%n\
Tree Hash:       %C(bold red)%T%C(reset)%n\
Author:          %C(bold blue)%an <%ae>%C(reset)%n\
Author Date:     %ai %C(green)(%ar)%C(reset)%n\
Committer:       %C(bold blue)%cn <%ce>%C(reset)%n\
Committer Date:  %ci %C(green)(%cr)%C(reset)%n\
Reflog Selector: %C(yellow)%gd%C(reset)%n\
Reflog Subject:  %gs%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    reflog-short = %C(reset)%C(bold red)%h <- %p%C(reset) - %C(yellow)%gd%C(dim white)%d%C(reset) - %ci %C(green)(%cr)%C(reset): %gs
    reflog-long = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Reflog Subject:  %gs%C(reset)%n\
Reflog Selector: %C(yellow)%gd%C(dim white)%d%C(reset)%n\
Commit Hash:     %C(bold red)%H%C(reset)%n\
Parent Hashes:   %C(bold red)%P%C(reset)%n\
Author:          %C(bold blue)%an <%ae>%C(reset)%n\
Committer Date:  %ci %C(green)(%cr)%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    longline = %C(bold red)%h%C(reset) - %s %C(green)(%cr) %C(bold blue)<%an>%C(dim white)%d%C(reset)
    longline-iso = %C(bold red)%h %C(reset)[%ci]: %s %C(green)(%cr) %C(bold blue)<%an - %ae>%C(dim white)%d%C(reset)

[pager]
    diff = true
    log = true
    show = true
    status = false

[diff]
    tool = vimdiff

[merge]
    tool = customVimMergeToolMin # vimdiff

[mergetool "customVimMergeTool"]
    cmd = vim -d -f --cmd 'let g:isMergeTool = 1' -c '4wincmd w | wincmd J' $LOCAL $BASE $REMOTE $MERGED

[mergetool "customVimMergeToolMin"]
    # cmd = vim -d -f --cmd 'let g:isMergeTool = 1' $MERGED
    cmd = vim -d -f --cmd 'let g:isMergeTool = 1' -c '4wincmd w | wincmd J | only | nnoremap ZZ :w \\| qa<CR>' $LOCAL $BASE $REMOTE $MERGED

[grep]
    linenumber = true

[credential]
    helper = cache

[commit]
    gpgsign = false
    verbose = true

[push]
    default = upstream

[pull]
    ff = only

[url "git@github.com:"]
    pushInsteadOf = "github:"

[url "https://github.com/"]
    insteadOf = "github:"

[url "git@gitlab.com:"]
    pushInsteadOf = "gitlab:"

[url "https://gitlab.com/"]
    insteadOf = "gitlab:"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

[gitflow "branch"]
    master = master
    develop = develop

[gitflow "prefix"]
    bugfix = bugfix/
    feature = feature/
    hotfix = hotfix/
    release = release/
    support = support/
    versiontag = ""

[include]
    path = ~/.gitconfig.env
