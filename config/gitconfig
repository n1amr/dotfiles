[alias]
    # author-date-old = "!f() { git filter-branch -f --env-filter 'GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE; export GIT_COMMITTER_DATE' HEAD~\"${1:-1}\"..HEAD; }; f" # git versoin < 2.22.0
    amend = commit --am --no-edit
    author-date = "!f() { git filter-repo --force --commit-callback 'commit.committer_date = commit.author_date' --refs HEAD~\"${1:-1}\"..HEAD; }; f"
    backup = "!f() { local branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; local tag_name=\"BACKUP/${branch_name}-$(date +\"%Y-%m-%d_%H-%M-%S\")\"; git tag \"$tag_name\" \"${1:-HEAD}\" && echo \"$tag_name\"; }; f"
    checkout-remote = "!f() { remote_name=\"$1\"; git stash-all && git is-clean && git fetch -v origin \"$1\" && git checkout -f -B \"$1\" \"origin/$1\"; }; f"
    cleanup = "!f() { git reflog expire --expire=now --all && git commit-graph write --reachable && git fsck && git prune && git repack -ad; }; f"
    code = "!f() { cd \"$(git repo-root)\"; code \"$@\" .; }; f"
    commit-timestamp = "!git commit -m \"$(date -u -Iseconds)\""
    commit-timestamp-all = "!git commit -am \"$(date -u -Iseconds)\""
    config-edit = config --edit
    config-path = "!echo \"$(git worktree-main-git-dir)/config\""
    copy-commit-hash = "!git rev-parse HEAD | clipboard"
    copy-current-branch = "!git current-branch | clipboard"
    copy-merge-base = "!git merge-base \"origin/$(git default-branch)\" HEAD | clipboard"
    create-github = "!git-create-github"
    create-gitlab = "!git-create-gitlab"
    create-stash = "!f() { git is-clean && echo \"Nothing to stash\" && return 0; ! git is-index-empty && echo >&2 \"FAILED: Index is not empty\"; return 1; git add -A && git stash push --keep-index && git reset; }; f"
    current-branch = rev-parse --abbrev-ref HEAD
    default-branch = config --get user.default-branch
    diff-default = "!git diff \"$(git default-branch)\""
    diff-default-latest = "!git diff \"origin/$(git default-branch)\""
    diff-default-merge-base = "!git diff \"$(git merge-base \"origin/$(git default-branch)\" HEAD)\""
    diff-upstream = diff '@{upstream}'
    init-root = "!f() { git init && git commit --allow-empty -m \"Root Commit\"; }; f"
    is-clean = "!f() { test -z \"$(git status --short )\"; }; f"
    is-index-empty = "!f() { test -z \"$(git diff-index --cached --name-only HEAD)\"; }; f"
    log-default = "!git log-pretty \"$(git default-branch)..HEAD\""
    log-default-latest = "!git log-pretty \"origin/$(git default-branch)..HEAD\""
    log-default-merge-base = "!git log-pretty \"$(git merge-base \"origin/$(git default-branch)\" HEAD)..HEAD\""
    log-message = log --graph
    log-patch = log --graph --patch
    log-pretty = log --graph --pretty=longline
    log-upstream = log-pretty '@{upstream}..HEAD'
    new-branch = "!f() { git checkout -B \"$1\" \"${2:-HEAD}\"; git branch --unset-upstream || true; git status; }; f"
    pr-branch = "!echo \"$(git current-branch | sed 's/-dev$//')\";"
    pull-branch = "!f() { git fetch origin \"$1:$1\"; }; f"
    pull-default = "!git pull-branch \"$(git default-branch)\""
    push-pr = "!f() { count="${1:-0}"; shift; git push origin \"HEAD~${count}:refs/heads/$(git pr-branch)\" \"$@\"; }; f"
    rebase-default = "!git rebase -i \"$(git default-branch)\""
    rebase-default-latest = "!git rebase -i \"origin/$(git default-branch)\""
    rebase-default-merge-base = "!git rebase -i \"$(git merge-base \"origin/$(git default-branch)\" HEAD)\""
    rebase-on = "!f() { local remote_branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; git rebase -i --autosquash --onto \"$remote_branch_name\" \"$(git merge-base \"$remote_branch_name\" HEAD)\" \"$(git rev-parse --abbrev-ref HEAD)\"; }; f"
    rebase-upstream = rebase -i '@{upstream}'
    rebase-upstream = rebase -i '@{upstream}'
    recommit = "!f() { echo \"$(git l -1)\" && old_msg=\"$(git log -1 --format='%s')\" && git reset --soft HEAD~ && git commit -m \"$old_msg\"; }; f"
    redo-rebase-on = "!f() { local remote_branch_name=\"${1:-$(git rev-parse --abbrev-ref HEAD)}\"; git rebase -i --autosquash \"$(git merge-base \"$remote_branch_name\" HEAD)\"; }; f"
    repo-root = rev-parse --path-format=absolute --show-toplevel
    repo-root-relative = rev-parse --show-cdup
    review = "!git-review"
    review-save = review --save
    set-default-branch = config user.default-branch
    stash-all = "!f() { ! git is-index-empty && echo >&2 \"FAILED: Index is not empty\" && return 1; git stash -u; }; f"
    vim = "!f() { cd \"$(git repo-root)\"; vim \"$@\" .; }; f"
    worktree-create = "!git-worktree-create"
    worktree-main = "!git worktree-main-git-dir | sed 's/\\/*.git$//'"
    worktree-main-exec = "!git -C \"$(git worktree-main-git-dir)\""
    worktree-main-git-dir = rev-parse --path-format=absolute --git-common-dir

    # Aliases
    a = add
    ap = add --patch
    br = branch
    c = commit
    ccb = copy-current-branch
    cch = copy-commit-hash
    cmb = copy-merge-base
    co = checkout
    cor = checkout-remote
    cr = review
    crs = review-save
    cs = create-stash
    ct = commit-timestamp
    cta = commit-timestamp-all
    df = diff
    dfd = diff-default
    dfdl = diff-default-latest
    dfdmb = diff-default-merge-base
    dfu = diff-upstream
    f = fetch --all --prune
    go = "!git-browse"
    gpr = "!f() { git go --branch \"$(git pr-branch)\" pr \"$@\"; }; f"
    l = log-pretty
    ll = log-message
    lmb = log-default-merge-base
    lp = log-patch
    mt = mergetool --tool customVimMergeToolMin
    mtv = mergetool --tool customVimMergeTool
    nb = new-branch
    next = "!f() { branch=\"${1:-master}\"; git checkout \"$(git log --reverse --ancestry-path --oneline HEAD..\"${branch}\" | head -1 | awk '{print $1}')\"; }; f"
    pick = cherry-pick
    pl = pull
    prev = checkout HEAD~
    ps = push
    pspr = push-pr
    psprf = "!f() { git push-pr \"$1\" -f; }; f"
    rb = rebase -i
    rba = rebase --abort
    rbb = "!f() { count=\"$1\"; shift; git rebase -i \"$@\" \"HEAD~${count}\"; }; f"
    rbc = rebase --continue
    rbd = rebase-default
    rbdl = rebase-default-latest
    rbdmb = rebase-default-merge-base
    rbe = rebase --edit-todo
    rbon = rebase-on
    rbsp =  rebase --show-current-patch
    rbu = rebase-upstream
    rl = log --walk-reflogs --pretty=reflog-short
    rll = log --walk-reflogs --pretty=reflog-long
    rrb = redo-rebase-on
    st = status
    wt = worktree
    wta = worktree add
    wtc = worktree-create
    wtl = worktree list
    wtmv = worktree move
    wtrm = worktree remove

[core]
    editor = vim
    pager = less
    excludesfile = ~/.gitignore
    autocrlf = input

[color]
    ui = true

[format]
    pretty = default

[pretty]
    default = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Commit: %C(bold red)%H%C(dim white)%d%C(reset)%n\
Author: %C(bold blue)%an <%ae>%C(reset)%n\
Date:   %ci %C(green)(%cr)%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    detailed = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Commit Hash:     %C(bold red)%H%C(dim white)%d%C(reset)%n\
Parent Hashes:   %C(bold red)%P%C(reset)%n\
Tree Hash:       %C(bold red)%T%C(reset)%n\
Author:          %C(bold blue)%an <%ae>%C(reset)%n\
Author Date:     %ai %C(green)(%ar)%C(reset)%n\
Committer:       %C(bold blue)%cn <%ce>%C(reset)%n\
Committer Date:  %ci %C(green)(%cr)%C(reset)%n\
Reflog Selector: %C(yellow)%gd%C(reset)%n\
Reflog Subject:  %gs%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    reflog-short = %C(reset)%C(bold red)%h < %p%C(reset) = %C(yellow)%gd%C(reset) @ %C(green)%ci (%cr)%C(reset) ? %C(bold blue)%gs%C(reset): %s%C(dim white)%d%C(reset)
    reflog-long = %C(bold white)--------------------------------------------------------------------------------%n%C(reset)\
Reflog Subject:  %gs%C(reset)%n\
Reflog Selector: %C(yellow)%gd%C(dim white)%d%C(reset)%n\
Commit Hash:     %C(bold red)%H%C(reset)%n\
Parent Hashes:   %C(bold red)%P%C(reset)%n\
Author:          %C(bold blue)%an <%ae>%C(reset)%n\
Committer Date:  %ci %C(green)(%cr)%C(reset)%n\
%n%w(0,4,4)%B%w(0,0,0)%-
    longline = %C(bold red)%h%C(reset) - %s %C(green)(%cr) %C(bold blue)<%an>%C(dim white)%d%C(reset)
    longline-iso = %C(bold red)%h %C(reset)[%ci]: %s %C(green)(%cr) %C(bold blue)<%an - %ae>%C(dim white)%d%C(reset)

[pager]
    diff = true
    log = true
    show = true
    status = false

[diff]
    tool = vimdiff

[merge]
    conflictStyle = diff3
    tool = customVimMergeToolMin # vimdiff

[mergetool "customVimMergeTool"]
    cmd = vim -d -f --cmd 'let g:isMergeTool = 1' -c '4wincmd w | wincmd J' $LOCAL $BASE $REMOTE $MERGED

[mergetool "customVimMergeToolMin"]
    # cmd = vim -d -f --cmd 'let g:isMergeTool = 1' $MERGED
    cmd = vim -d -f --cmd 'let g:isMergeTool = 1' -c '4wincmd w | wincmd J | only | nnoremap ZZ :w \\| qa<CR>' $LOCAL $BASE $REMOTE $MERGED

[rebase]
    autoSquash = true
    forkPoint = true
    rescheduleFailedExec = true
    stat = true
    updateRefs = true # Automatically force-update any branches that point to commits that are being rebased. Any branches that are checked out in a worktree are not updated in this way.

[grep]
    linenumber = true

[credential]
    helper = cache

[init]
    defaultBranch = master

[commit]
    gpgsign = false
    verbose = true

[push]
    default = upstream
    autoSetupRemote = true

[pull]
    ff = only

[url "git@github.com:"]
    pushInsteadOf = "github:"

[url "https://github.com/"]
    insteadOf = "github:"

[url "git@gitlab.com:"]
    pushInsteadOf = "gitlab:"

[url "https://gitlab.com/"]
    insteadOf = "gitlab:"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

[gitflow "branch"]
    master = master
    develop = develop

[gitflow "prefix"]
    bugfix = bugfix/
    feature = feature/
    hotfix = hotfix/
    release = release/
    support = support/
    versiontag = ""

[include]
    path = ~/.gitconfig.env

[credential "azrepos:org/msasg"]
	username = amralaa@microsoft.com
	azureAuthority = https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47
[credential "azrepos:org/msblox"]
	azureAuthority = https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47
	username = amralaa@microsoft.com
